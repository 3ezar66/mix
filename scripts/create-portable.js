import fs from 'fs';
import path from 'path';
import { execSync } from 'child_process';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

console.log('üöÄ Creating Kashif Mining Detector Portable Package...');

// Configuration
const config = {
  appName: '⁄©ÿßÿ¥ŸÅ ÿ¥ÿ®ÿ≠ ÿ≠ÿ®ÿ¥€å',
  version: '2.0.0',
  description: 'ÿ≥€åÿ≥ÿ™ŸÖ ŸÖŸÑ€å ÿ™ÿ¥ÿÆ€åÿµ ŸÖÿß€åŸÜ€åŸÜ⁄Ø ÿ∫€åÿ±ŸÖÿ¨ÿßÿ≤',
  port: 5000
};

// Create portable package
function createPortablePackage() {
  const portableDir = 'kashif-portable';
  
  // Clean existing directory
  if (fs.existsSync(portableDir)) {
    fs.rmSync(portableDir, { recursive: true });
  }
  fs.mkdirSync(portableDir);
  
  console.log('üìÅ Creating portable package structure...');
  
  // Create directory structure
  const dirs = [
    'dist',
    'server',
    'shared',
    'data',
    'logs',
    'config',
    'assets'
  ];
  
  dirs.forEach(dir => {
    fs.mkdirSync(path.join(portableDir, dir), { recursive: true });
  });
  
  // Copy built files
  console.log('üì¶ Copying built files...');
  if (fs.existsSync('dist')) {
    fs.cpSync('dist', path.join(portableDir, 'dist'), { recursive: true });
  }
  
  // Copy server files
  if (fs.existsSync('server')) {
    fs.cpSync('server', path.join(portableDir, 'server'), { recursive: true });
  }
  
  // Copy shared files
  if (fs.existsSync('shared')) {
    fs.cpSync('shared', path.join(portableDir, 'shared'), { recursive: true });
  }
  
  // Copy database
  if (fs.existsSync('ilam_mining.db')) {
    fs.copyFileSync('ilam_mining.db', path.join(portableDir, 'ilam_mining.db'));
  }
  
  // Copy data files
  if (fs.existsSync('data')) {
    fs.cpSync('data', path.join(portableDir, 'data'), { recursive: true });
  }
  
  // Copy drizzle migrations
  if (fs.existsSync('drizzle')) {
    fs.cpSync('drizzle', path.join(portableDir, 'drizzle'), { recursive: true });
  }
  
  // Create startup scripts
  createStartupScripts(portableDir);
  
  // Create configuration files
  createConfigFiles(portableDir);
  
  // Create documentation
  createDocumentation(portableDir);
  
  // Create package.json for portable
  createPortablePackageJson(portableDir);
  
  console.log('‚úÖ Portable package created successfully!');
  console.log(`üì¶ Package location: ${portableDir}`);
}

// Create startup scripts for different platforms
function createStartupScripts(portableDir) {
  console.log('üîß Creating startup scripts...');
  
  // Windows batch script
  const windowsScript = `@echo off
chcp 65001 >nul
title Kashif Mining Detector - ⁄©ÿßÿ¥ŸÅ ÿ¥ÿ®ÿ≠ ÿ≠ÿ®ÿ¥€å

echo ========================================
echo Kashif - Shabah Habashi
echo ÿ≥€åÿ≥ÿ™ŸÖ ŸÖŸÑ€å ÿ™ÿ¥ÿÆ€åÿµ ŸÖÿß€åŸÜ€åŸÜ⁄Ø ÿ∫€åÿ±ŸÖÿ¨ÿßÿ≤
echo ========================================
echo.
echo Version: ${config.version}
echo Port: ${config.port}
echo.
echo Checking system requirements...

REM Check if Node.js is installed
node --version >nul 2>&1
if %errorlevel% neq 0 (
    echo ‚ùå Node.js is not installed or not in PATH
    echo Please install Node.js from https://nodejs.org/
    pause
    exit /b 1
)

REM Check if port is available
netstat -an | find "0.0.0.0:${config.port}" >nul 2>&1
if %errorlevel% equ 0 (
    echo ‚ö†Ô∏è  Port ${config.port} is already in use
    echo Please close other applications using port ${config.port}
    pause
    exit /b 1
)

echo ‚úÖ System requirements met
echo.
echo Starting Kashif Mining Detector...
echo.

REM Set environment variables
set NODE_ENV=production
set PORT=${config.port}

REM Start the server
cd /d "%~dp0"
node dist/server/index.js

echo.
echo Server stopped. Press any key to exit...
pause >nul
`;

  fs.writeFileSync(path.join(portableDir, 'start.bat'), windowsScript);
  
  // Linux/Mac shell script
  const unixScript = `#!/bin/bash

# Kashif Mining Detector - ⁄©ÿßÿ¥ŸÅ ÿ¥ÿ®ÿ≠ ÿ≠ÿ®ÿ¥€å
# ÿ≥€åÿ≥ÿ™ŸÖ ŸÖŸÑ€å ÿ™ÿ¥ÿÆ€åÿµ ŸÖÿß€åŸÜ€åŸÜ⁄Ø ÿ∫€åÿ±ŸÖÿ¨ÿßÿ≤

echo "========================================"
echo "Kashif - Shabah Habashi"
echo "ÿ≥€åÿ≥ÿ™ŸÖ ŸÖŸÑ€å ÿ™ÿ¥ÿÆ€åÿµ ŸÖÿß€åŸÜ€åŸÜ⁄Ø ÿ∫€åÿ±ŸÖÿ¨ÿßÿ≤"
echo "========================================"
echo ""
echo "Version: ${config.version}"
echo "Port: ${config.port}"
echo ""

# Check if Node.js is installed
if ! command -v node &> /dev/null; then
    echo "‚ùå Node.js is not installed"
    echo "Please install Node.js from https://nodejs.org/"
    exit 1
fi

# Check if port is available
if lsof -Pi :${config.port} -sTCP:LISTEN -t >/dev/null ; then
    echo "‚ö†Ô∏è  Port ${config.port} is already in use"
    echo "Please close other applications using port ${config.port}"
    exit 1
fi

echo "‚úÖ System requirements met"
echo ""
echo "Starting Kashif Mining Detector..."
echo ""

# Set environment variables
export NODE_ENV=production
export PORT=${config.port}

# Get the directory where the script is located
SCRIPT_DIR="$( cd "$( dirname "\${BASH_SOURCE[0]}" )" &> /dev/null && pwd )"
cd "\$SCRIPT_DIR"

# Start the server
node dist/server/index.js

echo ""
echo "Server stopped."
`;

  fs.writeFileSync(path.join(portableDir, 'start.sh'), unixScript);
  
  // Make shell script executable
  try {
    fs.chmodSync(path.join(portableDir, 'start.sh'), '755');
  } catch (error) {
    console.log('‚ö†Ô∏è  Could not set executable permissions on start.sh');
  }
  
  // PowerShell script for Windows
  const powershellScript = `# Kashif Mining Detector - ⁄©ÿßÿ¥ŸÅ ÿ¥ÿ®ÿ≠ ÿ≠ÿ®ÿ¥€å
# ÿ≥€åÿ≥ÿ™ŸÖ ŸÖŸÑ€å ÿ™ÿ¥ÿÆ€åÿµ ŸÖÿß€åŸÜ€åŸÜ⁄Ø ÿ∫€åÿ±ŸÖÿ¨ÿßÿ≤

Write-Host "========================================" -ForegroundColor Cyan
Write-Host "Kashif - Shabah Habashi" -ForegroundColor Yellow
Write-Host "ÿ≥€åÿ≥ÿ™ŸÖ ŸÖŸÑ€å ÿ™ÿ¥ÿÆ€åÿµ ŸÖÿß€åŸÜ€åŸÜ⁄Ø ÿ∫€åÿ±ŸÖÿ¨ÿßÿ≤" -ForegroundColor Yellow
Write-Host "========================================" -ForegroundColor Cyan
Write-Host ""
Write-Host "Version: ${config.version}" -ForegroundColor Green
Write-Host "Port: ${config.port}" -ForegroundColor Green
Write-Host ""

# Check if Node.js is installed
try {
    $nodeVersion = node --version 2>$null
    if ($LASTEXITCODE -ne 0) {
        throw "Node.js not found"
    }
    Write-Host "‚úÖ Node.js version: $nodeVersion" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Node.js is not installed or not in PATH" -ForegroundColor Red
    Write-Host "Please install Node.js from https://nodejs.org/" -ForegroundColor Yellow
    Read-Host "Press Enter to exit"
    exit 1
}

# Check if port is available
$portInUse = Get-NetTCPConnection -LocalPort ${config.port} -ErrorAction SilentlyContinue
if ($portInUse) {
    Write-Host "‚ö†Ô∏è  Port ${config.port} is already in use" -ForegroundColor Yellow
    Write-Host "Please close other applications using port ${config.port}" -ForegroundColor Yellow
    Read-Host "Press Enter to exit"
    exit 1
}

Write-Host "‚úÖ System requirements met" -ForegroundColor Green
Write-Host ""
Write-Host "Starting Kashif Mining Detector..." -ForegroundColor Cyan
Write-Host ""

# Set environment variables
$env:NODE_ENV = "production"
$env:PORT = "${config.port}"

# Get the directory where the script is located
$scriptDir = Split-Path -Parent $MyInvocation.MyCommand.Path
Set-Location $scriptDir

# Start the server
node dist/server/index.js

Write-Host ""
Write-Host "Server stopped." -ForegroundColor Yellow
Read-Host "Press Enter to exit"
`;

  fs.writeFileSync(path.join(portableDir, 'start.ps1'), powershellScript);
  
  console.log('‚úÖ Startup scripts created');
}

// Create configuration files
function createConfigFiles(portableDir) {
  console.log('‚öôÔ∏è  Creating configuration files...');
  
  // Main configuration file
  const configFile = {
    app: {
      name: config.appName,
      version: config.version,
      description: config.description,
      port: config.port
    },
    database: {
      path: './ilam_mining.db',
      type: 'sqlite'
    },
    logging: {
      level: 'info',
      file: './logs/app.log',
      maxSize: '10m',
      maxFiles: 5
    },
    security: {
      sessionSecret: 'kashif-mining-detector-secret-key',
      jwtSecret: 'kashif-jwt-secret-key',
      bcryptRounds: 10
    },
    features: {
      realTimeScanning: true,
      networkAnalysis: true,
      geolocation: true,
      reporting: true,
      alerts: true
    }
  };
  
  fs.writeFileSync(
    path.join(portableDir, 'config', 'app.json'), 
    JSON.stringify(configFile, null, 2)
  );
  
  // Environment file
  const envFile = `# Kashif Mining Detector Environment Configuration
NODE_ENV=production
PORT=${config.port}
DATABASE_PATH=./ilam_mining.db
LOG_LEVEL=info
LOG_FILE=./logs/app.log
SESSION_SECRET=kashif-mining-detector-secret-key
JWT_SECRET=kashif-jwt-secret-key
BCRYPT_ROUNDS=10

# Feature flags
ENABLE_REAL_TIME_SCANNING=true
ENABLE_NETWORK_ANALYSIS=true
ENABLE_GEOLOCATION=true
ENABLE_REPORTING=true
ENABLE_ALERTS=true

# Security settings
ENABLE_RATE_LIMITING=true
RATE_LIMIT_WINDOW=15
RATE_LIMIT_MAX_REQUESTS=100

# Database settings
DB_MIGRATIONS_PATH=./drizzle
DB_BACKUP_PATH=./data/backups

# Logging settings
LOG_MAX_SIZE=10m
LOG_MAX_FILES=5
LOG_ROTATE=true
`;
  
  fs.writeFileSync(path.join(portableDir, 'config', '.env'), envFile);
  
  // Logging configuration
  const loggingConfig = {
    level: 'info',
    format: 'combined',
    transports: [
      {
        type: 'file',
        filename: './logs/app.log',
        maxsize: 10485760, // 10MB
        maxFiles: 5,
        tailable: true
      },
      {
        type: 'file',
        filename: './logs/error.log',
        level: 'error',
        maxsize: 10485760, // 10MB
        maxFiles: 3,
        tailable: true
      }
    ]
  };
  
  fs.writeFileSync(
    path.join(portableDir, 'config', 'logging.json'), 
    JSON.stringify(loggingConfig, null, 2)
  );
  
  console.log('‚úÖ Configuration files created');
}

// Create documentation
function createDocumentation(portableDir) {
  console.log('üìö Creating documentation...');
  
  // Main README
  const readme = `# Kashif Mining Detector - Portable

## ⁄©ÿßÿ¥ŸÅ ÿ¥ÿ®ÿ≠ ÿ≠ÿ®ÿ¥€å - ÿ≥€åÿ≥ÿ™ŸÖ ŸÖŸÑ€å ÿ™ÿ¥ÿÆ€åÿµ ŸÖÿß€åŸÜ€åŸÜ⁄Ø ÿ∫€åÿ±ŸÖÿ¨ÿßÿ≤

### ŸÖÿπÿ±ŸÅ€å:
ÿß€åŸÜ ŸÜÿ±ŸÖ‚ÄåÿßŸÅÿ≤ÿßÿ± €å⁄© ÿ≥€åÿ≥ÿ™ŸÖ Ÿæ€åÿ¥ÿ±ŸÅÿ™Ÿá ÿ®ÿ±ÿß€å ÿ™ÿ¥ÿÆ€åÿµ Ÿà ŸÜÿ∏ÿßÿ±ÿ™ ÿ®ÿ± ŸÅÿπÿßŸÑ€åÿ™‚ÄåŸáÿß€å ŸÖÿß€åŸÜ€åŸÜ⁄Ø ÿ±ŸÖÿ≤ÿßÿ±ÿ≤ ÿßÿ≥ÿ™ ⁄©Ÿá ÿ®Ÿá ÿµŸàÿ±ÿ™ ŸÇÿßÿ®ŸÑ ÿ≠ŸÖŸÑ ÿ∑ÿ±ÿßÿ≠€å ÿ¥ÿØŸá Ÿà ÿ®ÿØŸàŸÜ ŸÜ€åÿßÿ≤ ÿ®Ÿá ŸÜÿµÿ® ŸÇÿßÿ®ŸÑ ÿßÿ¨ÿ±ÿß ÿßÿ≥ÿ™.

### Ÿà€å⁄ò⁄Ø€å‚ÄåŸáÿß:
- üîç ÿ™ÿ¥ÿÆ€åÿµ ÿØÿ≥ÿ™⁄ØÿßŸá‚ÄåŸáÿß€å ŸÖÿß€åŸÜ€åŸÜ⁄Ø ÿ±ŸÖÿ≤ÿßÿ±ÿ≤
- üó∫Ô∏è ŸÜŸÇÿ¥Ÿá ÿ™ÿπÿßŸÖŸÑ€å ÿ®ÿß ŸÖŸàŸÇÿπ€åÿ™ ÿØŸÇ€åŸÇ
- üåê ÿ™ÿ≠ŸÑ€åŸÑ ÿ¥ÿ®⁄©Ÿá Ÿà ÿ™ÿ±ÿßŸÅ€å⁄©
- üìä ⁄Øÿ≤ÿßÿ±ÿ¥‚Äå⁄Ø€åÿ±€å ÿ¨ÿßŸÖÿπ
- üö® ÿ≥€åÿ≥ÿ™ŸÖ Ÿáÿ¥ÿØÿßÿ± Ÿæ€åÿ¥ÿ±ŸÅÿ™Ÿá
- üîê ÿßÿ≠ÿ±ÿßÿ≤ ŸáŸà€åÿ™ ÿßŸÖŸÜ
- üì± ÿ±ÿßÿ®ÿ∑ ⁄©ÿßÿ±ÿ®ÿ±€å ŸÖÿØÿ±ŸÜ Ÿà Ÿàÿß⁄©ŸÜÿ¥‚Äå⁄Øÿ±ÿß

### ŸÜ€åÿßÿ≤ŸÖŸÜÿØ€å‚ÄåŸáÿß€å ÿ≥€åÿ≥ÿ™ŸÖ:
- **ÿ≥€åÿ≥ÿ™ŸÖ‚ÄåÿπÿßŸÖŸÑ**: Windows 10+, macOS 10.14+, Linux (Ubuntu 18.04+)
- **Node.js**: ŸÜÿ≥ÿÆŸá 18 €åÿß ÿ®ÿßŸÑÿßÿ™ÿ±
- **RAM**: ÿ≠ÿØÿßŸÇŸÑ 4GB (ÿ™Ÿàÿµ€åŸá ÿ¥ÿØŸá: 8GB)
- **ŸÅÿ∂ÿß€å ÿØ€åÿ≥⁄©**: ÿ≠ÿØÿßŸÇŸÑ 2GB
- **ÿ¥ÿ®⁄©Ÿá**: ÿØÿ≥ÿ™ÿ±ÿ≥€å ÿ®Ÿá ÿß€åŸÜÿ™ÿ±ŸÜÿ™

### ÿ±ÿßŸáŸÜŸÖÿß€å ÿßÿ¨ÿ±ÿß:

#### Windows:
1. ŸÅÿß€åŸÑ \`start.bat\` ÿ±ÿß ÿßÿ¨ÿ±ÿß ⁄©ŸÜ€åÿØ
2. €åÿß ŸÅÿß€åŸÑ \`start.ps1\` ÿ±ÿß ÿØÿ± PowerShell ÿßÿ¨ÿ±ÿß ⁄©ŸÜ€åÿØ

#### macOS/Linux:
1. ÿ™ÿ±ŸÖ€åŸÜÿßŸÑ ÿ±ÿß ÿ®ÿßÿ≤ ⁄©ŸÜ€åÿØ
2. ÿ®Ÿá ŸæŸàÿ¥Ÿá ÿ®ÿ±ŸÜÿßŸÖŸá ÿ®ÿ±Ÿà€åÿØ
3. ÿØÿ≥ÿ™Ÿàÿ± \`./start.sh\` ÿ±ÿß ÿßÿ¨ÿ±ÿß ⁄©ŸÜ€åÿØ

### ÿØÿ≥ÿ™ÿ±ÿ≥€å ÿ®Ÿá ÿ®ÿ±ŸÜÿßŸÖŸá:
Ÿæÿ≥ ÿßÿ≤ ÿ±ÿßŸá‚ÄåÿßŸÜÿØÿßÿ≤€å ÿ≥ÿ±Ÿàÿ±ÿå ŸÖÿ±Ÿàÿ±⁄Øÿ± ÿ±ÿß ÿ®ÿßÿ≤ ⁄©ÿ±ÿØŸá Ÿà ÿ®Ÿá ÿ¢ÿØÿ±ÿ≥ ÿ≤€åÿ± ÿ®ÿ±Ÿà€åÿØ:
\`\`\`
http://localhost:${config.port}
\`\`\`

### ÿßÿ∑ŸÑÿßÿπÿßÿ™ Ÿàÿ±ŸàÿØ Ÿæ€åÿ¥‚ÄåŸÅÿ±ÿ∂:
- **ŸÜÿßŸÖ ⁄©ÿßÿ±ÿ®ÿ±€å**: admin
- **ÿ±ŸÖÿ≤ ÿπÿ®Ÿàÿ±**: admin

‚ö†Ô∏è **ÿ™Ÿàÿ¨Ÿá**: ÿ≠ÿ™ŸÖÿßŸã ÿ±ŸÖÿ≤ ÿπÿ®Ÿàÿ± Ÿæ€åÿ¥‚ÄåŸÅÿ±ÿ∂ ÿ±ÿß ÿ™ÿ∫€å€åÿ± ÿØŸá€åÿØ.

### ÿ≥ÿßÿÆÿ™ÿßÿ± ŸÅÿß€åŸÑ‚ÄåŸáÿß:
\`\`\`
kashif-portable/
‚îú‚îÄ‚îÄ dist/           # ŸÅÿß€åŸÑ‚ÄåŸáÿß€å ⁄©ÿßŸÖŸæÿß€åŸÑ ÿ¥ÿØŸá
‚îú‚îÄ‚îÄ server/         # ⁄©ÿØŸáÿß€å ÿ≥ÿ±Ÿàÿ±
‚îú‚îÄ‚îÄ shared/         # ŸÅÿß€åŸÑ‚ÄåŸáÿß€å ŸÖÿ¥ÿ™ÿ±⁄©
‚îú‚îÄ‚îÄ data/           # ÿØÿßÿØŸá‚ÄåŸáÿß Ÿà Ÿæÿ¥ÿ™€åÿ®ÿßŸÜ‚ÄåŸáÿß
‚îú‚îÄ‚îÄ logs/           # ŸÅÿß€åŸÑ‚ÄåŸáÿß€å ŸÑÿß⁄Ø
‚îú‚îÄ‚îÄ config/         # ŸÅÿß€åŸÑ‚ÄåŸáÿß€å ÿ™ŸÜÿ∏€åŸÖÿßÿ™
‚îú‚îÄ‚îÄ assets/         # ŸÅÿß€åŸÑ‚ÄåŸáÿß€å ÿ±ÿ≥ÿßŸÜŸá
‚îú‚îÄ‚îÄ ilam_mining.db  # Ÿæÿß€å⁄ØÿßŸá ÿØÿßÿØŸá
‚îú‚îÄ‚îÄ start.bat       # ÿßÿ≥⁄©ÿ±€åŸæÿ™ ÿ±ÿßŸá‚ÄåÿßŸÜÿØÿßÿ≤€å Windows
‚îú‚îÄ‚îÄ start.sh        # ÿßÿ≥⁄©ÿ±€åŸæÿ™ ÿ±ÿßŸá‚ÄåÿßŸÜÿØÿßÿ≤€å Linux/Mac
‚îú‚îÄ‚îÄ start.ps1       # ÿßÿ≥⁄©ÿ±€åŸæÿ™ ÿ±ÿßŸá‚ÄåÿßŸÜÿØÿßÿ≤€å PowerShell
‚îî‚îÄ‚îÄ README.md       # ÿß€åŸÜ ŸÅÿß€åŸÑ
\`\`\`

### ÿ™ŸÜÿ∏€åŸÖÿßÿ™:
ŸÅÿß€åŸÑ‚ÄåŸáÿß€å ÿ™ŸÜÿ∏€åŸÖÿßÿ™ ÿØÿ± ŸæŸàÿ¥Ÿá \`config\` ŸÇÿ±ÿßÿ± ÿØÿßÿ±ŸÜÿØ:
- \`app.json\`: ÿ™ŸÜÿ∏€åŸÖÿßÿ™ ÿßÿµŸÑ€å ÿ®ÿ±ŸÜÿßŸÖŸá
- \`.env\`: ŸÖÿ™ÿ∫€åÿ±Ÿáÿß€å ŸÖÿ≠€åÿ∑€å
- \`logging.json\`: ÿ™ŸÜÿ∏€åŸÖÿßÿ™ ŸÑÿß⁄Ø‚Äå⁄Ø€åÿ±€å

### ÿπ€åÿ®‚Äå€åÿßÿ®€å:

#### ŸÖÿ¥⁄©ŸÑ: ŸæŸàÿ±ÿ™ ${config.port} ÿØÿ± ÿ≠ÿßŸÑ ÿßÿ≥ÿ™ŸÅÿßÿØŸá ÿßÿ≥ÿ™
**ÿ±ÿßŸá‚Äåÿ≠ŸÑ**: 
1. ÿ®ÿ±ŸÜÿßŸÖŸá‚ÄåŸáÿß€å ÿØ€å⁄Øÿ± ÿ±ÿß ⁄©Ÿá ÿßÿ≤ ŸæŸàÿ±ÿ™ ${config.port} ÿßÿ≥ÿ™ŸÅÿßÿØŸá ŸÖ€å‚Äå⁄©ŸÜŸÜÿØ ÿ®ÿ®ŸÜÿØ€åÿØ
2. €åÿß ŸæŸàÿ±ÿ™ ÿ±ÿß ÿØÿ± ŸÅÿß€åŸÑ \`config/app.json\` ÿ™ÿ∫€å€åÿ± ÿØŸá€åÿØ

#### ŸÖÿ¥⁄©ŸÑ: Node.js €åÿßŸÅÿ™ ŸÜÿ¥ÿØ
**ÿ±ÿßŸá‚Äåÿ≠ŸÑ**:
1. Node.js ÿ±ÿß ÿßÿ≤ https://nodejs.org/ ÿØÿßŸÜŸÑŸàÿØ Ÿà ŸÜÿµÿ® ⁄©ŸÜ€åÿØ
2. ŸÖÿ∑ŸÖÿ¶ŸÜ ÿ¥Ÿà€åÿØ ⁄©Ÿá Node.js ÿØÿ± PATH ÿ≥€åÿ≥ÿ™ŸÖ ŸÇÿ±ÿßÿ± ÿØÿßÿ±ÿØ

#### ŸÖÿ¥⁄©ŸÑ: ÿØÿ≥ÿ™ÿ±ÿ≥€å ÿ®Ÿá Ÿæÿß€å⁄ØÿßŸá ÿØÿßÿØŸá
**ÿ±ÿßŸá‚Äåÿ≠ŸÑ**:
1. ŸÖÿ∑ŸÖÿ¶ŸÜ ÿ¥Ÿà€åÿØ ⁄©Ÿá ŸÅÿß€åŸÑ \`ilam_mining.db\` ŸÖŸàÿ¨ŸàÿØ ÿßÿ≥ÿ™
2. ÿØÿ≥ÿ™ÿ±ÿ≥€å‚ÄåŸáÿß€å ŸÑÿßÿ≤ŸÖ ÿ±ÿß ÿ®Ÿá ŸæŸàÿ¥Ÿá ÿ®ÿ±ŸÜÿßŸÖŸá ÿ®ÿØŸá€åÿØ

### Ÿæÿ¥ÿ™€åÿ®ÿßŸÜ€å:
- **ÿß€åŸÖ€åŸÑ**: support@kashif.ir
- **ÿ™ŸÑŸÅŸÜ**: +98-21-XXXXXXXX
- **Ÿàÿ®‚Äåÿ≥ÿß€åÿ™**: https://kashif.ir

### ŸÑÿß€åÿ≥ŸÜÿ≥:
ÿß€åŸÜ ŸÜÿ±ŸÖ‚ÄåÿßŸÅÿ≤ÿßÿ± ÿ™ÿ≠ÿ™ ŸÑÿß€åÿ≥ŸÜÿ≥ MIT ŸÖŸÜÿ™ÿ¥ÿ± ÿ¥ÿØŸá ÿßÿ≥ÿ™.

---
**ŸÜÿ≥ÿÆŸá**: ${config.version}  
**ÿ™Ÿàÿ≥ÿπŸá‚Äå€åÿßŸÅÿ™Ÿá ÿ™Ÿàÿ≥ÿ∑**: ÿ™€åŸÖ ⁄©ÿßÿ¥ŸÅ  
**ÿ™ÿßÿ±€åÿÆ ÿßŸÜÿ™ÿ¥ÿßÿ±**: ${new Date().toLocaleDateString('fa-IR')}
`;

  fs.writeFileSync(path.join(portableDir, 'README.md'), readme);
  
  // Quick start guide
  const quickStart = `# ÿ±ÿßŸáŸÜŸÖÿß€å ÿ≥ÿ±€åÿπ - Kashif Mining Detector

## ÿ¥ÿ±Ÿàÿπ ÿ≥ÿ±€åÿπ:

### 1. ÿ±ÿßŸá‚ÄåÿßŸÜÿØÿßÿ≤€å:
- **Windows**: ÿ±Ÿà€å \`start.bat\` ÿØŸàÿ®ÿßÿ± ⁄©ŸÑ€å⁄© ⁄©ŸÜ€åÿØ
- **Linux/Mac**: ÿØÿ± ÿ™ÿ±ŸÖ€åŸÜÿßŸÑ \`./start.sh\` ÿ±ÿß ÿßÿ¨ÿ±ÿß ⁄©ŸÜ€åÿØ

### 2. ÿØÿ≥ÿ™ÿ±ÿ≥€å:
- ŸÖÿ±Ÿàÿ±⁄Øÿ± ÿ±ÿß ÿ®ÿßÿ≤ ⁄©ŸÜ€åÿØ
- ÿ®Ÿá ÿ¢ÿØÿ±ÿ≥ \`http://localhost:${config.port}\` ÿ®ÿ±Ÿà€åÿØ

### 3. Ÿàÿ±ŸàÿØ:
- ŸÜÿßŸÖ ⁄©ÿßÿ±ÿ®ÿ±€å: \`admin\`
- ÿ±ŸÖÿ≤ ÿπÿ®Ÿàÿ±: \`admin\`

### 4. ÿ™ÿ∫€å€åÿ± ÿ±ŸÖÿ≤ ÿπÿ®Ÿàÿ±:
- ÿ®Ÿá ÿ®ÿÆÿ¥ ÿ™ŸÜÿ∏€åŸÖÿßÿ™ ÿ®ÿ±Ÿà€åÿØ
- ÿ±ŸÖÿ≤ ÿπÿ®Ÿàÿ± ÿ¨ÿØ€åÿØ ÿ±ÿß ÿ™ŸÜÿ∏€åŸÖ ⁄©ŸÜ€åÿØ

### 5. ÿ¥ÿ±Ÿàÿπ ÿßÿ≥⁄©ŸÜ:
- ÿ±Ÿà€å "ÿ¥ÿ±Ÿàÿπ ÿßÿ≥⁄©ŸÜ" ⁄©ŸÑ€å⁄© ⁄©ŸÜ€åÿØ
- ŸÖŸÜÿßÿ∑ŸÇ ŸÖŸàÿ±ÿØ ŸÜÿ∏ÿ± ÿ±ÿß ÿßŸÜÿ™ÿÆÿßÿ® ⁄©ŸÜ€åÿØ
- ŸÜÿ™ÿß€åÿ¨ ÿ±ÿß ŸÖÿ¥ÿßŸáÿØŸá ⁄©ŸÜ€åÿØ

---
ÿ®ÿ±ÿß€å ÿßÿ∑ŸÑÿßÿπÿßÿ™ ÿ®€åÿ¥ÿ™ÿ± ŸÅÿß€åŸÑ README.md ÿ±ÿß ŸÖÿ∑ÿßŸÑÿπŸá ⁄©ŸÜ€åÿØ.
`;

  fs.writeFileSync(path.join(portableDir, 'QUICK_START.md'), quickStart);
  
  // Troubleshooting guide
  const troubleshooting = `# ÿ±ÿßŸáŸÜŸÖÿß€å ÿπ€åÿ®‚Äå€åÿßÿ®€å - Kashif Mining Detector

## ŸÖÿ¥⁄©ŸÑÿßÿ™ ÿ±ÿß€åÿ¨ Ÿà ÿ±ÿßŸá‚Äåÿ≠ŸÑ‚ÄåŸáÿß:

### 1. ÿÆÿ∑ÿß€å "Port ${config.port} is already in use"
**ÿπŸÑÿ™**: ŸæŸàÿ±ÿ™ ${config.port} ÿ™Ÿàÿ≥ÿ∑ ÿ®ÿ±ŸÜÿßŸÖŸá ÿØ€å⁄Øÿ±€å ÿßÿ≥ÿ™ŸÅÿßÿØŸá ŸÖ€å‚Äåÿ¥ŸàÿØ
**ÿ±ÿßŸá‚Äåÿ≠ŸÑ**:
- ÿ®ÿ±ŸÜÿßŸÖŸá‚ÄåŸáÿß€å ÿØ€å⁄Øÿ± ÿ±ÿß ÿ®ÿ®ŸÜÿØ€åÿØ
- €åÿß ŸæŸàÿ±ÿ™ ÿ±ÿß ÿØÿ± \`config/app.json\` ÿ™ÿ∫€å€åÿ± ÿØŸá€åÿØ

### 2. ÿÆÿ∑ÿß€å "Node.js is not installed"
**ÿπŸÑÿ™**: Node.js ŸÜÿµÿ® ŸÜÿ¥ÿØŸá €åÿß ÿØÿ± PATH ŸÜ€åÿ≥ÿ™
**ÿ±ÿßŸá‚Äåÿ≠ŸÑ**:
- Node.js ÿ±ÿß ÿßÿ≤ https://nodejs.org/ ÿØÿßŸÜŸÑŸàÿØ ⁄©ŸÜ€åÿØ
- ŸÜÿµÿ® ⁄©ŸÜ€åÿØ Ÿà ÿ≥€åÿ≥ÿ™ŸÖ ÿ±ÿß ÿ±ÿßŸá‚ÄåÿßŸÜÿØÿßÿ≤€å ŸÖÿ¨ÿØÿØ ⁄©ŸÜ€åÿØ

### 3. ÿÆÿ∑ÿß€å "Database connection failed"
**ÿπŸÑÿ™**: ŸÖÿ¥⁄©ŸÑ ÿØÿ± ÿØÿ≥ÿ™ÿ±ÿ≥€å ÿ®Ÿá Ÿæÿß€å⁄ØÿßŸá ÿØÿßÿØŸá
**ÿ±ÿßŸá‚Äåÿ≠ŸÑ**:
- ŸÅÿß€åŸÑ \`ilam_mining.db\` ÿ±ÿß ÿ®ÿ±ÿ±ÿ≥€å ⁄©ŸÜ€åÿØ
- ÿØÿ≥ÿ™ÿ±ÿ≥€å‚ÄåŸáÿß€å ŸæŸàÿ¥Ÿá ÿ±ÿß ÿ®ÿ±ÿ±ÿ≥€å ⁄©ŸÜ€åÿØ

### 4. ÿÆÿ∑ÿß€å "Permission denied"
**ÿπŸÑÿ™**: ÿπÿØŸÖ ÿØÿ≥ÿ™ÿ±ÿ≥€å ⁄©ÿßŸÅ€å
**ÿ±ÿßŸá‚Äåÿ≠ŸÑ**:
- ÿ®ÿ±ŸÜÿßŸÖŸá ÿ±ÿß ÿ®ÿß ÿØÿ≥ÿ™ÿ±ÿ≥€å Administrator ÿßÿ¨ÿ±ÿß ⁄©ŸÜ€åÿØ
- ÿØÿ≥ÿ™ÿ±ÿ≥€å‚ÄåŸáÿß€å ŸæŸàÿ¥Ÿá ÿ±ÿß ÿ®ÿ±ÿ±ÿ≥€å ⁄©ŸÜ€åÿØ

### 5. ÿÆÿ∑ÿß€å "Module not found"
**ÿπŸÑÿ™**: ŸÅÿß€åŸÑ‚ÄåŸáÿß€å ÿ®ÿ±ŸÜÿßŸÖŸá ŸÜÿßŸÇÿµ ÿßÿ≥ÿ™
**ÿ±ÿßŸá‚Äåÿ≠ŸÑ**:
- ŸÅÿß€åŸÑ‚ÄåŸáÿß ÿ±ÿß ŸÖÿ¨ÿØÿØÿßŸã ÿØÿßŸÜŸÑŸàÿØ ⁄©ŸÜ€åÿØ
- ŸÖÿ∑ŸÖÿ¶ŸÜ ÿ¥Ÿà€åÿØ ⁄©Ÿá ÿ™ŸÖÿßŸÖ ŸÅÿß€åŸÑ‚ÄåŸáÿß ŸÖŸàÿ¨ŸàÿØ Ÿáÿ≥ÿ™ŸÜÿØ

### 6. ŸÖÿ¥⁄©ŸÑ ÿØÿ± ŸÜŸÖÿß€åÿ¥ ÿ≤ÿ®ÿßŸÜ ŸÅÿßÿ±ÿ≥€å
**ÿπŸÑÿ™**: ÿ™ŸÜÿ∏€åŸÖÿßÿ™ ÿ≤ÿ®ÿßŸÜ ÿ≥€åÿ≥ÿ™ŸÖ
**ÿ±ÿßŸá‚Äåÿ≠ŸÑ**:
- ŸÅŸàŸÜÿ™‚ÄåŸáÿß€å ŸÅÿßÿ±ÿ≥€å ÿ±ÿß ŸÜÿµÿ® ⁄©ŸÜ€åÿØ
- ÿ™ŸÜÿ∏€åŸÖÿßÿ™ ÿ≤ÿ®ÿßŸÜ ŸÖÿ±Ÿàÿ±⁄Øÿ± ÿ±ÿß ÿ®ÿ±ÿ±ÿ≥€å ⁄©ŸÜ€åÿØ

## ŸÑÿß⁄Ø‚ÄåŸáÿß:
ŸÅÿß€åŸÑ‚ÄåŸáÿß€å ŸÑÿß⁄Ø ÿØÿ± ŸæŸàÿ¥Ÿá \`logs\` ŸÇÿ±ÿßÿ± ÿØÿßÿ±ŸÜÿØ:
- \`app.log\`: ŸÑÿß⁄Ø‚ÄåŸáÿß€å ÿπŸÖŸàŸÖ€å
- \`error.log\`: ŸÑÿß⁄Ø‚ÄåŸáÿß€å ÿÆÿ∑ÿß

## ÿ™ŸÖÿßÿ≥ ÿ®ÿß Ÿæÿ¥ÿ™€åÿ®ÿßŸÜ€å:
ÿØÿ± ÿµŸàÿ±ÿ™ ÿ®ÿ±Ÿàÿ≤ ŸÖÿ¥⁄©ŸÑ:
1. ŸÅÿß€åŸÑ‚ÄåŸáÿß€å ŸÑÿß⁄Ø ÿ±ÿß ÿ®ÿ±ÿ±ÿ≥€å ⁄©ŸÜ€åÿØ
2. ÿ®ÿß ÿ™€åŸÖ Ÿæÿ¥ÿ™€åÿ®ÿßŸÜ€å ÿ™ŸÖÿßÿ≥ ÿ®⁄Ø€åÿ±€åÿØ
3. ÿßÿ∑ŸÑÿßÿπÿßÿ™ ÿ≥€åÿ≥ÿ™ŸÖ Ÿà ÿÆÿ∑ÿß ÿ±ÿß ÿßÿ±ÿ≥ÿßŸÑ ⁄©ŸÜ€åÿØ

---
ÿ®ÿ±ÿß€å ÿßÿ∑ŸÑÿßÿπÿßÿ™ ÿ®€åÿ¥ÿ™ÿ± ÿ®Ÿá ŸÅÿß€åŸÑ README.md ŸÖÿ±ÿßÿ¨ÿπŸá ⁄©ŸÜ€åÿØ.
`;

  fs.writeFileSync(path.join(portableDir, 'TROUBLESHOOTING.md'), troubleshooting);
  
  console.log('‚úÖ Documentation created');
}

// Create portable package.json
function createPortablePackageJson(portableDir) {
  const portablePackageJson = {
    name: "kashif-mining-detector-portable",
    version: config.version,
    description: "Portable version of Kashif Mining Detector",
    main: "dist/server/index.js",
    scripts: {
      "start": "node dist/server/index.js",
      "start:dev": "NODE_ENV=development node dist/server/index.js"
    },
    dependencies: {
      // Minimal dependencies for portable version
      "express": "^4.21.2",
      "better-sqlite3": "^12.2.0",
      "sqlite3": "^5.1.7",
      "drizzle-orm": "^0.39.3",
      "winston": "^3.17.0",
      "dotenv": "^17.2.0"
    },
    engines: {
      "node": ">=18.0.0"
    },
    portable: true,
    platform: "cross-platform"
  };
  
  fs.writeFileSync(
    path.join(portableDir, 'package.json'), 
    JSON.stringify(portablePackageJson, null, 2)
  );
}

// Main execution
async function main() {
  try {
    console.log('üöÄ Starting portable package creation...');
    console.log(`üìã Configuration:`);
    console.log(`  - App Name: ${config.appName}`);
    console.log(`  - Version: ${config.version}`);
    console.log(`  - Port: ${config.port}`);
    
    // Check if build exists
    if (!fs.existsSync('dist')) {
      console.log('üî® Building project first...');
      execSync('npm run build', { stdio: 'inherit' });
    }
    
    createPortablePackage();
    
    console.log('üéâ Portable package created successfully!');
    console.log('üìÅ Package location: kashif-portable/');
    console.log('üöÄ To run:');
    console.log('  Windows: Double-click start.bat');
    console.log('  Linux/Mac: ./start.sh');
    console.log('  PowerShell: .\\start.ps1');
    
  } catch (error) {
    console.error('‚ùå Failed to create portable package:', error);
    process.exit(1);
  }
}

// Run the main function
main(); 