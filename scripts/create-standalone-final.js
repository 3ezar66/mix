import fs from 'fs';
import path from 'path';
import { execSync } from 'child_process';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

console.log('üöÄ Creating Kashif Mining Detector - Complete Standalone Solution...');

// Configuration
const config = {
  appName: '⁄©ÿßÿ¥ŸÅ ÿ¥ÿ®ÿ≠ ÿ≠ÿ®ÿ¥€å',
  version: '2.0.0',
  description: 'ÿ≥€åÿ≥ÿ™ŸÖ ŸÖŸÑ€å ÿ™ÿ¥ÿÆ€åÿµ ŸÖÿß€åŸÜ€åŸÜ⁄Ø ÿ∫€åÿ±ŸÖÿ¨ÿßÿ≤',
  author: 'Kashif Team',
  port: 5000
};

// Create complete standalone package
function createCompleteStandalone() {
  const standaloneDir = 'kashif-standalone-complete';
  
  // Clean existing directory
  if (fs.existsSync(standaloneDir)) {
    fs.rmSync(standaloneDir, { recursive: true });
  }
  fs.mkdirSync(standaloneDir);
  
  console.log('üìÅ Creating complete standalone package structure...');
  
  // Create directory structure
  const dirs = [
    'app',
    'app/dist',
    'app/server',
    'app/shared',
    'app/data',
    'app/logs',
    'app/config',
    'app/assets',
    'tools',
    'docs'
  ];
  
  dirs.forEach(dir => {
    fs.mkdirSync(path.join(standaloneDir, dir), { recursive: true });
  });
  
  // Copy built files
  console.log('üì¶ Copying application files...');
  if (fs.existsSync('dist')) {
    fs.cpSync('dist', path.join(standaloneDir, 'app/dist'), { recursive: true });
  }
  
  // Copy server files
  if (fs.existsSync('server')) {
    fs.cpSync('server', path.join(standaloneDir, 'app/server'), { recursive: true });
  }
  
  // Copy shared files
  if (fs.existsSync('shared')) {
    fs.cpSync('shared', path.join(standaloneDir, 'app/shared'), { recursive: true });
  }
  
  // Copy database
  if (fs.existsSync('ilam_mining.db')) {
    fs.copyFileSync('ilam_mining.db', path.join(standaloneDir, 'app/ilam_mining.db'));
  }
  
  // Copy data files
  if (fs.existsSync('data')) {
    fs.cpSync('data', path.join(standaloneDir, 'app/data'), { recursive: true });
  }
  
  // Copy drizzle migrations
  if (fs.existsSync('drizzle')) {
    fs.cpSync('drizzle', path.join(standaloneDir, 'app/drizzle'), { recursive: true });
  }
  
  // Create startup tools
  createStartupTools(standaloneDir);
  
  // Create configuration files
  createConfigurationFiles(standaloneDir);
  
  // Create documentation
  createCompleteDocumentation(standaloneDir);
  
  // Create installer scripts
  createInstallerScripts(standaloneDir);
  
  // Create system requirements checker
  createSystemChecker(standaloneDir);
  
  console.log('‚úÖ Complete standalone package created successfully!');
  console.log(`üì¶ Package location: ${standaloneDir}`);
}

// Create startup tools for different platforms
function createStartupTools(standaloneDir) {
  console.log('üîß Creating startup tools...');
  
  // Windows Launcher
  const windowsLauncher = `@echo off
chcp 65001 >nul
title Kashif Mining Detector - ⁄©ÿßÿ¥ŸÅ ÿ¥ÿ®ÿ≠ ÿ≠ÿ®ÿ¥€å

echo ========================================
echo Kashif - Shabah Habashi
echo ÿ≥€åÿ≥ÿ™ŸÖ ŸÖŸÑ€å ÿ™ÿ¥ÿÆ€åÿµ ŸÖÿß€åŸÜ€åŸÜ⁄Ø ÿ∫€åÿ±ŸÖÿ¨ÿßÿ≤
echo ========================================
echo.
echo Version: ${config.version}
echo Port: ${config.port}
echo.

REM Check system requirements
echo Checking system requirements...
call "tools\\check-system.bat"
if %errorlevel% neq 0 (
    echo System requirements not met. Please check the requirements.
    pause
    exit /b 1
)

echo ‚úÖ System requirements met
echo.
echo Starting Kashif Mining Detector...
echo.

REM Set environment variables
set NODE_ENV=production
set PORT=${config.port}
set APP_ROOT=%~dp0app

REM Start the server
cd /d "%APP_ROOT%"
node dist/server/index.js

echo.
echo Server stopped. Press any key to exit...
pause >nul
`;

  fs.writeFileSync(path.join(standaloneDir, 'start.bat'), windowsLauncher);
  
  // Linux/Mac Launcher
  const unixLauncher = `#!/bin/bash

# Kashif Mining Detector - ⁄©ÿßÿ¥ŸÅ ÿ¥ÿ®ÿ≠ ÿ≠ÿ®ÿ¥€å
# ÿ≥€åÿ≥ÿ™ŸÖ ŸÖŸÑ€å ÿ™ÿ¥ÿÆ€åÿµ ŸÖÿß€åŸÜ€åŸÜ⁄Ø ÿ∫€åÿ±ŸÖÿ¨ÿßÿ≤

echo "========================================"
echo "Kashif - Shabah Habashi"
echo "ÿ≥€åÿ≥ÿ™ŸÖ ŸÖŸÑ€å ÿ™ÿ¥ÿÆ€åÿµ ŸÖÿß€åŸÜ€åŸÜ⁄Ø ÿ∫€åÿ±ŸÖÿ¨ÿßÿ≤"
echo "========================================"
echo ""
echo "Version: ${config.version}"
echo "Port: ${config.port}"
echo ""

# Check system requirements
echo "Checking system requirements..."
./tools/check-system.sh
if [ $? -ne 0 ]; then
    echo "System requirements not met. Please check the requirements."
    exit 1
fi

echo "‚úÖ System requirements met"
echo ""
echo "Starting Kashif Mining Detector..."
echo ""

# Set environment variables
export NODE_ENV=production
export PORT=${config.port}
export APP_ROOT="$( cd "$( dirname "\${BASH_SOURCE[0]}" )" &> /dev/null && pwd )/app"

# Start the server
cd "\$APP_ROOT"
node dist/server/index.js

echo ""
echo "Server stopped."
`;

  fs.writeFileSync(path.join(standaloneDir, 'start.sh'), unixLauncher);
  
  // Make shell script executable
  try {
    fs.chmodSync(path.join(standaloneDir, 'start.sh'), '755');
  } catch (error) {
    console.log('‚ö†Ô∏è  Could not set executable permissions on start.sh');
  }
  
  // PowerShell Launcher
  const powershellLauncher = `# Kashif Mining Detector - ⁄©ÿßÿ¥ŸÅ ÿ¥ÿ®ÿ≠ ÿ≠ÿ®ÿ¥€å
# ÿ≥€åÿ≥ÿ™ŸÖ ŸÖŸÑ€å ÿ™ÿ¥ÿÆ€åÿµ ŸÖÿß€åŸÜ€åŸÜ⁄Ø ÿ∫€åÿ±ŸÖÿ¨ÿßÿ≤

Write-Host "========================================" -ForegroundColor Cyan
Write-Host "Kashif - Shabah Habashi" -ForegroundColor Yellow
Write-Host "ÿ≥€åÿ≥ÿ™ŸÖ ŸÖŸÑ€å ÿ™ÿ¥ÿÆ€åÿµ ŸÖÿß€åŸÜ€åŸÜ⁄Ø ÿ∫€åÿ±ŸÖÿ¨ÿßÿ≤" -ForegroundColor Yellow
Write-Host "========================================" -ForegroundColor Cyan
Write-Host ""
Write-Host "Version: ${config.version}" -ForegroundColor Green
Write-Host "Port: ${config.port}" -ForegroundColor Green
Write-Host ""

# Check system requirements
Write-Host "Checking system requirements..." -ForegroundColor Cyan
& ".\tools\check-system.ps1"
if ($LASTEXITCODE -ne 0) {
    Write-Host "System requirements not met. Please check the requirements." -ForegroundColor Red
    Read-Host "Press Enter to exit"
    exit 1
}

Write-Host "‚úÖ System requirements met" -ForegroundColor Green
Write-Host ""
Write-Host "Starting Kashif Mining Detector..." -ForegroundColor Cyan
Write-Host ""

# Set environment variables
$env:NODE_ENV = "production"
$env:PORT = "${config.port}"
$env:APP_ROOT = (Split-Path -Parent $MyInvocation.MyCommand.Path) + "\app"

# Start the server
Set-Location $env:APP_ROOT
node dist/server/index.js

Write-Host ""
Write-Host "Server stopped." -ForegroundColor Yellow
Read-Host "Press Enter to exit"
`;

  fs.writeFileSync(path.join(standaloneDir, 'start.ps1'), powershellLauncher);
  
  console.log('‚úÖ Startup tools created');
}

// Create system requirement checkers
function createSystemChecker(standaloneDir) {
  console.log('üîç Creating system requirement checkers...');
  
  // Windows system checker
  const windowsChecker = `@echo off
echo Checking Node.js...
node --version >nul 2>&1
if %errorlevel% neq 0 (
    echo ‚ùå Node.js is not installed or not in PATH
    echo Please install Node.js from https://nodejs.org/
    exit /b 1
)

echo Checking port availability...
netstat -an | find "0.0.0.0:${config.port}" >nul 2>&1
if %errorlevel% equ 0 (
    echo ‚ö†Ô∏è  Port ${config.port} is already in use
    echo Please close other applications using port ${config.port}
    exit /b 1
)

echo Checking disk space...
for /f "tokens=3" %%a in ('dir /-c 2^>nul ^| find "bytes free"') do set free=%%a
if %free% LSS 1000000000 (
    echo ‚ö†Ô∏è  Low disk space. At least 1GB free space is recommended.
)

echo ‚úÖ All system requirements met
exit /b 0
`;

  fs.writeFileSync(path.join(standaloneDir, 'tools', 'check-system.bat'), windowsChecker);
  
  // Linux/Mac system checker
  const unixChecker = `#!/bin/bash

echo "Checking Node.js..."
if ! command -v node &> /dev/null; then
    echo "‚ùå Node.js is not installed"
    echo "Please install Node.js from https://nodejs.org/"
    exit 1
fi

echo "Checking port availability..."
if lsof -Pi :${config.port} -sTCP:LISTEN -t >/dev/null ; then
    echo "‚ö†Ô∏è  Port ${config.port} is already in use"
    echo "Please close other applications using port ${config.port}"
    exit 1
fi

echo "Checking disk space..."
free_space=$(df . | awk 'NR==2 {print $4}')
if [ $free_space -lt 1000000 ]; then
    echo "‚ö†Ô∏è  Low disk space. At least 1GB free space is recommended."
fi

echo "‚úÖ All system requirements met"
exit 0
`;

  fs.writeFileSync(path.join(standaloneDir, 'tools', 'check-system.sh'), unixChecker);
  
  // PowerShell system checker
  const powershellChecker = `# System Requirements Checker

Write-Host "Checking Node.js..." -ForegroundColor Cyan
try {
    $nodeVersion = node --version 2>$null
    if ($LASTEXITCODE -ne 0) {
        throw "Node.js not found"
    }
    Write-Host "‚úÖ Node.js version: $nodeVersion" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Node.js is not installed or not in PATH" -ForegroundColor Red
    Write-Host "Please install Node.js from https://nodejs.org/" -ForegroundColor Yellow
    exit 1
}

Write-Host "Checking port availability..." -ForegroundColor Cyan
$portInUse = Get-NetTCPConnection -LocalPort ${config.port} -ErrorAction SilentlyContinue
if ($portInUse) {
    Write-Host "‚ö†Ô∏è  Port ${config.port} is already in use" -ForegroundColor Yellow
    Write-Host "Please close other applications using port ${config.port}" -ForegroundColor Yellow
    exit 1
}

Write-Host "Checking disk space..." -ForegroundColor Cyan
$freeSpace = (Get-WmiObject -Class Win32_LogicalDisk -Filter "DeviceID='C:'").FreeSpace
if ($freeSpace -lt 1GB) {
    Write-Host "‚ö†Ô∏è  Low disk space. At least 1GB free space is recommended." -ForegroundColor Yellow
}

Write-Host "‚úÖ All system requirements met" -ForegroundColor Green
exit 0
`;

  fs.writeFileSync(path.join(standaloneDir, 'tools', 'check-system.ps1'), powershellChecker);
  
  console.log('‚úÖ System requirement checkers created');
}

// Create configuration files
function createConfigurationFiles(standaloneDir) {
  console.log('‚öôÔ∏è  Creating configuration files...');
  
  // Main configuration file
  const configFile = {
    app: {
      name: config.appName,
      version: config.version,
      description: config.description,
      port: config.port,
      environment: 'production'
    },
    database: {
      path: './ilam_mining.db',
      type: 'sqlite',
      backup: {
        enabled: true,
        interval: '24h',
        maxBackups: 7,
        path: './data/backups'
      }
    },
    logging: {
      level: 'info',
      file: './logs/app.log',
      maxSize: '10m',
      maxFiles: 5,
      rotation: true
    },
    security: {
      sessionSecret: 'kashif-mining-detector-secret-key',
      jwtSecret: 'kashif-jwt-secret-key',
      bcryptRounds: 10,
      rateLimiting: {
        enabled: true,
        windowMs: 15 * 60 * 1000, // 15 minutes
        maxRequests: 100
      }
    },
    features: {
      realTimeScanning: true,
      networkAnalysis: true,
      geolocation: true,
      reporting: true,
      alerts: true,
      rfAnalysis: true,
      thermalAnalysis: true,
      acousticAnalysis: true
    },
    performance: {
      maxConcurrentScans: 10,
      scanTimeout: 30000,
      memoryLimit: '1GB',
      cpuLimit: 80
    }
  };
  
  fs.writeFileSync(
    path.join(standaloneDir, 'app', 'config', 'app.json'), 
    JSON.stringify(configFile, null, 2)
  );
  
  // Environment file
  const envFile = `# Kashif Mining Detector Environment Configuration
NODE_ENV=production
PORT=${config.port}
DATABASE_PATH=./ilam_mining.db
LOG_LEVEL=info
LOG_FILE=./logs/app.log
SESSION_SECRET=kashif-mining-detector-secret-key
JWT_SECRET=kashif-jwt-secret-key
BCRYPT_ROUNDS=10

# Feature flags
ENABLE_REAL_TIME_SCANNING=true
ENABLE_NETWORK_ANALYSIS=true
ENABLE_GEOLOCATION=true
ENABLE_REPORTING=true
ENABLE_ALERTS=true
ENABLE_RF_ANALYSIS=true
ENABLE_THERMAL_ANALYSIS=true
ENABLE_ACOUSTIC_ANALYSIS=true

# Security settings
ENABLE_RATE_LIMITING=true
RATE_LIMIT_WINDOW=15
RATE_LIMIT_MAX_REQUESTS=100

# Database settings
DB_MIGRATIONS_PATH=./drizzle
DB_BACKUP_PATH=./data/backups
DB_BACKUP_ENABLED=true
DB_BACKUP_INTERVAL=24h
DB_MAX_BACKUPS=7

# Logging settings
LOG_MAX_SIZE=10m
LOG_MAX_FILES=5
LOG_ROTATE=true

# Performance settings
MAX_CONCURRENT_SCANS=10
SCAN_TIMEOUT=30000
MEMORY_LIMIT=1GB
CPU_LIMIT=80
`;
  
  fs.writeFileSync(path.join(standaloneDir, 'app', 'config', '.env'), envFile);
  
  console.log('‚úÖ Configuration files created');
}

// Create installer scripts
function createInstallerScripts(standaloneDir) {
  console.log('üîß Creating installer scripts...');
  
  // Windows installer
  const windowsInstaller = `@echo off
echo Installing Kashif Mining Detector...
echo.

REM Create program directory
set "INSTALL_DIR=%PROGRAMFILES%\\Kashif Mining Detector"
if not exist "%INSTALL_DIR%" mkdir "%INSTALL_DIR%"

REM Copy files
xcopy /E /I /Y "app" "%INSTALL_DIR%\\app"
xcopy /E /I /Y "tools" "%INSTALL_DIR%\\tools"
copy "start.bat" "%INSTALL_DIR%\\"
copy "README.md" "%INSTALL_DIR%\\"

REM Create desktop shortcut
echo Creating desktop shortcut...
powershell -Command "$WshShell = New-Object -comObject WScript.Shell; $Shortcut = $WshShell.CreateShortcut('%USERPROFILE%\\Desktop\\Kashif Mining Detector.lnk'); $Shortcut.TargetPath = '%INSTALL_DIR%\\start.bat'; $Shortcut.WorkingDirectory = '%INSTALL_DIR%'; $Shortcut.Save()"

REM Create start menu shortcut
echo Creating start menu shortcut...
if not exist "%APPDATA%\\Microsoft\\Windows\\Start Menu\\Programs\\Kashif Mining Detector" mkdir "%APPDATA%\\Microsoft\\Windows\\Start Menu\\Programs\\Kashif Mining Detector"
powershell -Command "$WshShell = New-Object -comObject WScript.Shell; $Shortcut = $WshShell.CreateShortcut('%APPDATA%\\Microsoft\\Windows\\Start Menu\\Programs\\Kashif Mining Detector\\Kashif Mining Detector.lnk'); $Shortcut.TargetPath = '%INSTALL_DIR%\\start.bat'; $Shortcut.WorkingDirectory = '%INSTALL_DIR%'; $Shortcut.Save()"

echo.
echo ‚úÖ Installation completed successfully!
echo.
echo Kashif Mining Detector has been installed to: %INSTALL_DIR%
echo Desktop shortcut has been created.
echo Start menu shortcut has been created.
echo.
echo To start the application, double-click the desktop shortcut or run:
echo %INSTALL_DIR%\\start.bat
echo.
pause
`;

  fs.writeFileSync(path.join(standaloneDir, 'install.bat'), windowsInstaller);
  
  // Linux installer
  const linuxInstaller = `#!/bin/bash

echo "Installing Kashif Mining Detector..."
echo ""

# Create installation directory
INSTALL_DIR="/opt/kashif-mining-detector"
sudo mkdir -p "$INSTALL_DIR"

# Copy files
sudo cp -r app "$INSTALL_DIR/"
sudo cp -r tools "$INSTALL_DIR/"
sudo cp start.sh "$INSTALL_DIR/"
sudo cp README.md "$INSTALL_DIR/"

# Set permissions
sudo chmod +x "$INSTALL_DIR/start.sh"
sudo chmod +x "$INSTALL_DIR/tools/check-system.sh"

# Create desktop shortcut
echo "Creating desktop shortcut..."
cat > ~/Desktop/kashif-mining-detector.desktop << EOF
[Desktop Entry]
Version=1.0
Type=Application
Name=Kashif Mining Detector
Comment=ÿ≥€åÿ≥ÿ™ŸÖ ŸÖŸÑ€å ÿ™ÿ¥ÿÆ€åÿµ ŸÖÿß€åŸÜ€åŸÜ⁄Ø ÿ∫€åÿ±ŸÖÿ¨ÿßÿ≤
Exec=$INSTALL_DIR/start.sh
Icon=$INSTALL_DIR/app/assets/icon.png
Terminal=true
Categories=Utility;Security;
EOF

chmod +x ~/Desktop/kashif-mining-detector.desktop

# Create systemd service (optional)
echo "Creating systemd service..."
sudo tee /etc/systemd/system/kashif-mining-detector.service > /dev/null << EOF
[Unit]
Description=Kashif Mining Detector
After=network.target

[Service]
Type=simple
User=$USER
WorkingDirectory=$INSTALL_DIR
ExecStart=$INSTALL_DIR/start.sh
Restart=always
RestartSec=10

[Install]
WantedBy=multi-user.target
EOF

echo ""
echo "‚úÖ Installation completed successfully!"
echo ""
echo "Kashif Mining Detector has been installed to: $INSTALL_DIR"
echo "Desktop shortcut has been created."
echo "Systemd service has been created (optional)."
echo ""
echo "To start the application:"
echo "  Desktop: Double-click the desktop shortcut"
echo "  Terminal: $INSTALL_DIR/start.sh"
echo "  Service: sudo systemctl start kashif-mining-detector"
echo ""
`;

  fs.writeFileSync(path.join(standaloneDir, 'install.sh'), linuxInstaller);
  
  console.log('‚úÖ Installer scripts created');
}

// Create comprehensive documentation
function createCompleteDocumentation(standaloneDir) {
  console.log('üìö Creating comprehensive documentation...');
  
  // Main README
  const readme = `# Kashif Mining Detector - Complete Standalone Solution

## ⁄©ÿßÿ¥ŸÅ ÿ¥ÿ®ÿ≠ ÿ≠ÿ®ÿ¥€å - ÿ≥€åÿ≥ÿ™ŸÖ ŸÖŸÑ€å ÿ™ÿ¥ÿÆ€åÿµ ŸÖÿß€åŸÜ€åŸÜ⁄Ø ÿ∫€åÿ±ŸÖÿ¨ÿßÿ≤

### ŸÖÿπÿ±ŸÅ€å:
ÿß€åŸÜ ÿ®ÿ≥ÿ™Ÿá ÿ¥ÿßŸÖŸÑ €å⁄© ÿ±ÿßŸá‚Äåÿ≠ŸÑ ⁄©ÿßŸÖŸÑ Ÿà ŸÖÿ≥ÿ™ŸÇŸÑ ÿ®ÿ±ÿß€å ÿ™ÿ¥ÿÆ€åÿµ Ÿà ŸÜÿ∏ÿßÿ±ÿ™ ÿ®ÿ± ŸÅÿπÿßŸÑ€åÿ™‚ÄåŸáÿß€å ŸÖÿß€åŸÜ€åŸÜ⁄Ø ÿ±ŸÖÿ≤ÿßÿ±ÿ≤ ÿßÿ≥ÿ™ ⁄©Ÿá ÿ®ÿØŸàŸÜ ŸÜ€åÿßÿ≤ ÿ®Ÿá ŸÜÿµÿ® €åÿß ÿ™ŸÜÿ∏€åŸÖÿßÿ™ Ÿæ€å⁄Ü€åÿØŸá ŸÇÿßÿ®ŸÑ ÿßÿ¨ÿ±ÿß ÿßÿ≥ÿ™.

### Ÿà€å⁄ò⁄Ø€å‚ÄåŸáÿß€å ⁄©ŸÑ€åÿØ€å:
- üîç ÿ™ÿ¥ÿÆ€åÿµ Ÿæ€åÿ¥ÿ±ŸÅÿ™Ÿá ÿØÿ≥ÿ™⁄ØÿßŸá‚ÄåŸáÿß€å ŸÖÿß€åŸÜ€åŸÜ⁄Ø ÿ±ŸÖÿ≤ÿßÿ±ÿ≤
- üó∫Ô∏è ŸÜŸÇÿ¥Ÿá ÿ™ÿπÿßŸÖŸÑ€å ÿ®ÿß ŸÖŸàŸÇÿπ€åÿ™ ÿ¨ÿ∫ÿ±ÿßŸÅ€åÿß€å€å ÿØŸÇ€åŸÇ
- üåê ÿ™ÿ≠ŸÑ€åŸÑ ÿπŸÖ€åŸÇ ÿ™ÿ±ÿßŸÅ€å⁄© ÿ¥ÿ®⁄©Ÿá
- üìä ⁄Øÿ≤ÿßÿ±ÿ¥‚Äå⁄Ø€åÿ±€å ÿ¨ÿßŸÖÿπ Ÿà ÿ≠ÿ±ŸÅŸá‚Äåÿß€å
- üö® ÿ≥€åÿ≥ÿ™ŸÖ Ÿáÿ¥ÿØÿßÿ± Ÿæ€åÿ¥ÿ±ŸÅÿ™Ÿá Ÿà ŸáŸàÿ¥ŸÖŸÜÿØ
- üîê ÿßÿ≠ÿ±ÿßÿ≤ ŸáŸà€åÿ™ ÿßŸÖŸÜ Ÿà ⁄ÜŸÜÿØŸÑÿß€åŸá
- üì± ÿ±ÿßÿ®ÿ∑ ⁄©ÿßÿ±ÿ®ÿ±€å ŸÖÿØÿ±ŸÜ Ÿà Ÿàÿß⁄©ŸÜÿ¥‚Äå⁄Øÿ±ÿß
- üî¨ ÿ™ÿ≠ŸÑ€åŸÑ ÿ≥€å⁄ØŸÜÿßŸÑ‚ÄåŸáÿß€å RF
- üå°Ô∏è ÿ™ÿ¥ÿÆ€åÿµ ÿ≠ÿ±ÿßÿ±ÿ™€å
- üîä ÿ™ÿ≠ŸÑ€åŸÑ ÿ¢⁄©Ÿàÿ≥ÿ™€å⁄©

### ŸÜ€åÿßÿ≤ŸÖŸÜÿØ€å‚ÄåŸáÿß€å ÿ≥€åÿ≥ÿ™ŸÖ:

#### ÿ≠ÿØÿßŸÇŸÑ ŸÜ€åÿßÿ≤ŸÖŸÜÿØ€å‚ÄåŸáÿß:
- **ÿ≥€åÿ≥ÿ™ŸÖ‚ÄåÿπÿßŸÖŸÑ**: Windows 10+, macOS 10.14+, Linux (Ubuntu 18.04+)
- **Node.js**: ŸÜÿ≥ÿÆŸá 18 €åÿß ÿ®ÿßŸÑÿßÿ™ÿ±
- **RAM**: ÿ≠ÿØÿßŸÇŸÑ 4GB
- **ŸÅÿ∂ÿß€å ÿØ€åÿ≥⁄©**: ÿ≠ÿØÿßŸÇŸÑ 2GB
- **ÿ¥ÿ®⁄©Ÿá**: ÿØÿ≥ÿ™ÿ±ÿ≥€å ÿ®Ÿá ÿß€åŸÜÿ™ÿ±ŸÜÿ™

#### ÿ™Ÿàÿµ€åŸá ÿ¥ÿØŸá:
- **RAM**: 8GB €åÿß ÿ®€åÿ¥ÿ™ÿ±
- **ŸÅÿ∂ÿß€å ÿØ€åÿ≥⁄©**: 5GB €åÿß ÿ®€åÿ¥ÿ™ÿ±
- **Ÿæÿ±ÿØÿßÿ≤ŸÜÿØŸá**: Intel i5 €åÿß AMD Ryzen 5 €åÿß ÿ®ÿßŸÑÿßÿ™ÿ±

### ÿ±ÿßŸáŸÜŸÖÿß€å ŸÜÿµÿ® Ÿà ÿßÿ¨ÿ±ÿß:

#### ÿ±Ÿàÿ¥ 1: ÿßÿ¨ÿ±ÿß€å ŸÖÿ≥ÿ™ŸÇ€åŸÖ (Ÿæ€åÿ¥ŸÜŸáÿßÿØ€å)
1. ŸÅÿß€åŸÑ ŸÖŸÜÿßÿ≥ÿ® ÿ≥€åÿ≥ÿ™ŸÖ‚ÄåÿπÿßŸÖŸÑ ÿÆŸàÿØ ÿ±ÿß ÿßÿ¨ÿ±ÿß ⁄©ŸÜ€åÿØ:
   - **Windows**: `start.bat`
   - **Linux/Mac**: `./start.sh`
   - **PowerShell**: `.\start.ps1`

#### ÿ±Ÿàÿ¥ 2: ŸÜÿµÿ® ⁄©ÿßŸÖŸÑ
1. ŸÅÿß€åŸÑ ŸÜÿµÿ® ŸÖŸÜÿßÿ≥ÿ® ÿ±ÿß ÿßÿ¨ÿ±ÿß ⁄©ŸÜ€åÿØ:
   - **Windows**: `install.bat`
   - **Linux**: `./install.sh`

### ÿØÿ≥ÿ™ÿ±ÿ≥€å ÿ®Ÿá ÿ®ÿ±ŸÜÿßŸÖŸá:
Ÿæÿ≥ ÿßÿ≤ ÿ±ÿßŸá‚ÄåÿßŸÜÿØÿßÿ≤€å ÿ≥ÿ±Ÿàÿ±ÿå ŸÖÿ±Ÿàÿ±⁄Øÿ± ÿ±ÿß ÿ®ÿßÿ≤ ⁄©ÿ±ÿØŸá Ÿà ÿ®Ÿá ÿ¢ÿØÿ±ÿ≥ ÿ≤€åÿ± ÿ®ÿ±Ÿà€åÿØ:
\`\`\`
http://localhost:${config.port}
\`\`\`

### ÿßÿ∑ŸÑÿßÿπÿßÿ™ Ÿàÿ±ŸàÿØ Ÿæ€åÿ¥‚ÄåŸÅÿ±ÿ∂:
- **ŸÜÿßŸÖ ⁄©ÿßÿ±ÿ®ÿ±€å**: admin
- **ÿ±ŸÖÿ≤ ÿπÿ®Ÿàÿ±**: admin

‚ö†Ô∏è **ÿ™Ÿàÿ¨Ÿá**: ÿ≠ÿ™ŸÖÿßŸã ÿ±ŸÖÿ≤ ÿπÿ®Ÿàÿ± Ÿæ€åÿ¥‚ÄåŸÅÿ±ÿ∂ ÿ±ÿß ÿ™ÿ∫€å€åÿ± ÿØŸá€åÿØ.

### ÿ≥ÿßÿÆÿ™ÿßÿ± ŸÅÿß€åŸÑ‚ÄåŸáÿß:
\`\`\`
kashif-standalone-complete/
‚îú‚îÄ‚îÄ app/                    # ŸÅÿß€åŸÑ‚ÄåŸáÿß€å ÿßÿµŸÑ€å ÿ®ÿ±ŸÜÿßŸÖŸá
‚îÇ   ‚îú‚îÄ‚îÄ dist/              # ŸÅÿß€åŸÑ‚ÄåŸáÿß€å ⁄©ÿßŸÖŸæÿß€åŸÑ ÿ¥ÿØŸá
‚îÇ   ‚îú‚îÄ‚îÄ server/            # ⁄©ÿØŸáÿß€å ÿ≥ÿ±Ÿàÿ±
‚îÇ   ‚îú‚îÄ‚îÄ shared/            # ŸÅÿß€åŸÑ‚ÄåŸáÿß€å ŸÖÿ¥ÿ™ÿ±⁄©
‚îÇ   ‚îú‚îÄ‚îÄ data/              # ÿØÿßÿØŸá‚ÄåŸáÿß Ÿà Ÿæÿ¥ÿ™€åÿ®ÿßŸÜ‚ÄåŸáÿß
‚îÇ   ‚îú‚îÄ‚îÄ logs/              # ŸÅÿß€åŸÑ‚ÄåŸáÿß€å ŸÑÿß⁄Ø
‚îÇ   ‚îú‚îÄ‚îÄ config/            # ŸÅÿß€åŸÑ‚ÄåŸáÿß€å ÿ™ŸÜÿ∏€åŸÖÿßÿ™
‚îÇ   ‚îú‚îÄ‚îÄ assets/            # ŸÅÿß€åŸÑ‚ÄåŸáÿß€å ÿ±ÿ≥ÿßŸÜŸá
‚îÇ   ‚îî‚îÄ‚îÄ ilam_mining.db     # Ÿæÿß€å⁄ØÿßŸá ÿØÿßÿØŸá
‚îú‚îÄ‚îÄ tools/                 # ÿßÿ®ÿ≤ÿßÿ±Ÿáÿß€å ⁄©ŸÖ⁄©€å
‚îÇ   ‚îú‚îÄ‚îÄ check-system.bat   # ÿ®ÿ±ÿ±ÿ≥€å ÿ≥€åÿ≥ÿ™ŸÖ (Windows)
‚îÇ   ‚îú‚îÄ‚îÄ check-system.sh    # ÿ®ÿ±ÿ±ÿ≥€å ÿ≥€åÿ≥ÿ™ŸÖ (Linux/Mac)
‚îÇ   ‚îî‚îÄ‚îÄ check-system.ps1   # ÿ®ÿ±ÿ±ÿ≥€å ÿ≥€åÿ≥ÿ™ŸÖ (PowerShell)
‚îú‚îÄ‚îÄ docs/                  # ŸÖÿ≥ÿ™ŸÜÿØÿßÿ™
‚îú‚îÄ‚îÄ start.bat              # ÿ±ÿßŸá‚ÄåÿßŸÜÿØÿßÿ≤€å Windows
‚îú‚îÄ‚îÄ start.sh               # ÿ±ÿßŸá‚ÄåÿßŸÜÿØÿßÿ≤€å Linux/Mac
‚îú‚îÄ‚îÄ start.ps1              # ÿ±ÿßŸá‚ÄåÿßŸÜÿØÿßÿ≤€å PowerShell
‚îú‚îÄ‚îÄ install.bat            # ŸÜÿµÿ® Windows
‚îú‚îÄ‚îÄ install.sh             # ŸÜÿµÿ® Linux
‚îî‚îÄ‚îÄ README.md              # ÿß€åŸÜ ŸÅÿß€åŸÑ
\`\`\`

### ÿ™ŸÜÿ∏€åŸÖÿßÿ™ Ÿæ€åÿ¥ÿ±ŸÅÿ™Ÿá:
ŸÅÿß€åŸÑ‚ÄåŸáÿß€å ÿ™ŸÜÿ∏€åŸÖÿßÿ™ ÿØÿ± ŸæŸàÿ¥Ÿá \`app/config\` ŸÇÿ±ÿßÿ± ÿØÿßÿ±ŸÜÿØ:
- \`app.json\`: ÿ™ŸÜÿ∏€åŸÖÿßÿ™ ÿßÿµŸÑ€å ÿ®ÿ±ŸÜÿßŸÖŸá
- \`.env\`: ŸÖÿ™ÿ∫€åÿ±Ÿáÿß€å ŸÖÿ≠€åÿ∑€å

### ÿπ€åÿ®‚Äå€åÿßÿ®€å:

#### ŸÖÿ¥⁄©ŸÑ: ŸæŸàÿ±ÿ™ ${config.port} ÿØÿ± ÿ≠ÿßŸÑ ÿßÿ≥ÿ™ŸÅÿßÿØŸá ÿßÿ≥ÿ™
**ÿ±ÿßŸá‚Äåÿ≠ŸÑ**: 
1. ÿ®ÿ±ŸÜÿßŸÖŸá‚ÄåŸáÿß€å ÿØ€å⁄Øÿ± ÿ±ÿß ⁄©Ÿá ÿßÿ≤ ŸæŸàÿ±ÿ™ ${config.port} ÿßÿ≥ÿ™ŸÅÿßÿØŸá ŸÖ€å‚Äå⁄©ŸÜŸÜÿØ ÿ®ÿ®ŸÜÿØ€åÿØ
2. €åÿß ŸæŸàÿ±ÿ™ ÿ±ÿß ÿØÿ± ŸÅÿß€åŸÑ \`app/config/app.json\` ÿ™ÿ∫€å€åÿ± ÿØŸá€åÿØ

#### ŸÖÿ¥⁄©ŸÑ: Node.js €åÿßŸÅÿ™ ŸÜÿ¥ÿØ
**ÿ±ÿßŸá‚Äåÿ≠ŸÑ**:
1. Node.js ÿ±ÿß ÿßÿ≤ https://nodejs.org/ ÿØÿßŸÜŸÑŸàÿØ Ÿà ŸÜÿµÿ® ⁄©ŸÜ€åÿØ
2. ŸÖÿ∑ŸÖÿ¶ŸÜ ÿ¥Ÿà€åÿØ ⁄©Ÿá Node.js ÿØÿ± PATH ÿ≥€åÿ≥ÿ™ŸÖ ŸÇÿ±ÿßÿ± ÿØÿßÿ±ÿØ

#### ŸÖÿ¥⁄©ŸÑ: ÿØÿ≥ÿ™ÿ±ÿ≥€å ÿ®Ÿá Ÿæÿß€å⁄ØÿßŸá ÿØÿßÿØŸá
**ÿ±ÿßŸá‚Äåÿ≠ŸÑ**:
1. ŸÖÿ∑ŸÖÿ¶ŸÜ ÿ¥Ÿà€åÿØ ⁄©Ÿá ŸÅÿß€åŸÑ \`ilam_mining.db\` ŸÖŸàÿ¨ŸàÿØ ÿßÿ≥ÿ™
2. ÿØÿ≥ÿ™ÿ±ÿ≥€å‚ÄåŸáÿß€å ŸÑÿßÿ≤ŸÖ ÿ±ÿß ÿ®Ÿá ŸæŸàÿ¥Ÿá ÿ®ÿ±ŸÜÿßŸÖŸá ÿ®ÿØŸá€åÿØ

#### ŸÖÿ¥⁄©ŸÑ: ÿÆÿ∑ÿß€å "Permission denied"
**ÿ±ÿßŸá‚Äåÿ≠ŸÑ**:
1. ÿ®ÿ±ŸÜÿßŸÖŸá ÿ±ÿß ÿ®ÿß ÿØÿ≥ÿ™ÿ±ÿ≥€å Administrator ÿßÿ¨ÿ±ÿß ⁄©ŸÜ€åÿØ
2. ÿØÿ≥ÿ™ÿ±ÿ≥€å‚ÄåŸáÿß€å ŸæŸàÿ¥Ÿá ÿ±ÿß ÿ®ÿ±ÿ±ÿ≥€å ⁄©ŸÜ€åÿØ

### Ÿà€å⁄ò⁄Ø€å‚ÄåŸáÿß€å ÿßŸÖŸÜ€åÿ™€å:
- üîê ÿßÿ≠ÿ±ÿßÿ≤ ŸáŸà€åÿ™ ⁄ÜŸÜÿØŸÑÿß€åŸá
- üõ°Ô∏è ŸÖÿ≠ÿßŸÅÿ∏ÿ™ ÿØÿ± ÿ®ÿ±ÿßÿ®ÿ± ÿ≠ŸÖŸÑÿßÿ™
- üîí ÿ±ŸÖÿ≤⁄Øÿ∞ÿßÿ±€å ÿØÿßÿØŸá‚ÄåŸáÿß
- üìù ŸÑÿß⁄Ø‚Äå⁄Ø€åÿ±€å ÿßŸÖŸÜ
- üö´ ŸÖÿ≠ÿØŸàÿØ€åÿ™ ŸÜÿ±ÿÆ ÿØÿ±ÿÆŸàÿßÿ≥ÿ™

### Ÿæÿ¥ÿ™€åÿ®ÿßŸÜ€å:
- **ÿß€åŸÖ€åŸÑ**: support@kashif.ir
- **ÿ™ŸÑŸÅŸÜ**: +98-21-XXXXXXXX
- **Ÿàÿ®‚Äåÿ≥ÿß€åÿ™**: https://kashif.ir
- **ŸÖÿ≥ÿ™ŸÜÿØÿßÿ™**: https://docs.kashif.ir

### ŸÑÿß€åÿ≥ŸÜÿ≥:
ÿß€åŸÜ ŸÜÿ±ŸÖ‚ÄåÿßŸÅÿ≤ÿßÿ± ÿ™ÿ≠ÿ™ ŸÑÿß€åÿ≥ŸÜÿ≥ MIT ŸÖŸÜÿ™ÿ¥ÿ± ÿ¥ÿØŸá ÿßÿ≥ÿ™.

### ÿ™ÿ∫€å€åÿ±ÿßÿ™ ŸÜÿ≥ÿÆŸá ${config.version}:
- ÿ®Ÿáÿ®ŸàÿØ ÿπŸÖŸÑ⁄©ÿ±ÿØ Ÿà ÿ≥ÿ±ÿπÿ™
- ÿßÿ∂ÿßŸÅŸá ÿ¥ÿØŸÜ ÿ™ÿ≠ŸÑ€åŸÑ‚ÄåŸáÿß€å Ÿæ€åÿ¥ÿ±ŸÅÿ™Ÿá
- ÿ®Ÿáÿ®ŸàÿØ ÿ±ÿßÿ®ÿ∑ ⁄©ÿßÿ±ÿ®ÿ±€å
- ÿ±ŸÅÿπ ŸÖÿ¥⁄©ŸÑÿßÿ™ ÿßŸÖŸÜ€åÿ™€å
- ÿßÿ∂ÿßŸÅŸá ÿ¥ÿØŸÜ ŸÇÿßÿ®ŸÑ€åÿ™‚ÄåŸáÿß€å ÿ¨ÿØ€åÿØ

---
**ŸÜÿ≥ÿÆŸá**: ${config.version}  
**ÿ™Ÿàÿ≥ÿπŸá‚Äå€åÿßŸÅÿ™Ÿá ÿ™Ÿàÿ≥ÿ∑**: ${config.author}  
**ÿ™ÿßÿ±€åÿÆ ÿßŸÜÿ™ÿ¥ÿßÿ±**: ${new Date().toLocaleDateString('fa-IR')}  
**Ÿàÿ∂ÿπ€åÿ™**: ÿ¢ŸÖÿßÿØŸá ÿ®ÿ±ÿß€å ÿ™ŸàŸÑ€åÿØ
`;

  fs.writeFileSync(path.join(standaloneDir, 'README.md'), readme);
  
  // Quick start guide
  const quickStart = `# ÿ±ÿßŸáŸÜŸÖÿß€å ÿ≥ÿ±€åÿπ - Kashif Mining Detector

## ÿ¥ÿ±Ÿàÿπ ÿ≥ÿ±€åÿπ:

### 1. ÿ®ÿ±ÿ±ÿ≥€å ÿ≥€åÿ≥ÿ™ŸÖ:
- **Windows**: \`tools\\check-system.bat\`
- **Linux/Mac**: \`./tools/check-system.sh\`
- **PowerShell**: \`.\tools\\check-system.ps1\`

### 2. ÿ±ÿßŸá‚ÄåÿßŸÜÿØÿßÿ≤€å:
- **Windows**: ÿ±Ÿà€å \`start.bat\` ÿØŸàÿ®ÿßÿ± ⁄©ŸÑ€å⁄© ⁄©ŸÜ€åÿØ
- **Linux/Mac**: ÿØÿ± ÿ™ÿ±ŸÖ€åŸÜÿßŸÑ \`./start.sh\` ÿ±ÿß ÿßÿ¨ÿ±ÿß ⁄©ŸÜ€åÿØ
- **PowerShell**: \`.\start.ps1\` ÿ±ÿß ÿßÿ¨ÿ±ÿß ⁄©ŸÜ€åÿØ

### 3. ÿØÿ≥ÿ™ÿ±ÿ≥€å:
- ŸÖÿ±Ÿàÿ±⁄Øÿ± ÿ±ÿß ÿ®ÿßÿ≤ ⁄©ŸÜ€åÿØ
- ÿ®Ÿá ÿ¢ÿØÿ±ÿ≥ \`http://localhost:${config.port}\` ÿ®ÿ±Ÿà€åÿØ

### 4. Ÿàÿ±ŸàÿØ:
- ŸÜÿßŸÖ ⁄©ÿßÿ±ÿ®ÿ±€å: \`admin\`
- ÿ±ŸÖÿ≤ ÿπÿ®Ÿàÿ±: \`admin\`

### 5. ÿ™ÿ∫€å€åÿ± ÿ±ŸÖÿ≤ ÿπÿ®Ÿàÿ±:
- ÿ®Ÿá ÿ®ÿÆÿ¥ ÿ™ŸÜÿ∏€åŸÖÿßÿ™ ÿ®ÿ±Ÿà€åÿØ
- ÿ±ŸÖÿ≤ ÿπÿ®Ÿàÿ± ÿ¨ÿØ€åÿØ ÿ±ÿß ÿ™ŸÜÿ∏€åŸÖ ⁄©ŸÜ€åÿØ

### 6. ÿ¥ÿ±Ÿàÿπ ÿßÿ≥⁄©ŸÜ:
- ÿ±Ÿà€å "ÿ¥ÿ±Ÿàÿπ ÿßÿ≥⁄©ŸÜ" ⁄©ŸÑ€å⁄© ⁄©ŸÜ€åÿØ
- ŸÖŸÜÿßÿ∑ŸÇ ŸÖŸàÿ±ÿØ ŸÜÿ∏ÿ± ÿ±ÿß ÿßŸÜÿ™ÿÆÿßÿ® ⁄©ŸÜ€åÿØ
- ŸÜÿ™ÿß€åÿ¨ ÿ±ÿß ŸÖÿ¥ÿßŸáÿØŸá ⁄©ŸÜ€åÿØ

---
ÿ®ÿ±ÿß€å ÿßÿ∑ŸÑÿßÿπÿßÿ™ ÿ®€åÿ¥ÿ™ÿ± ŸÅÿß€åŸÑ README.md ÿ±ÿß ŸÖÿ∑ÿßŸÑÿπŸá ⁄©ŸÜ€åÿØ.
`;

  fs.writeFileSync(path.join(standaloneDir, 'docs', 'QUICK_START.md'), quickStart);
  
  // Troubleshooting guide
  const troubleshooting = `# ÿ±ÿßŸáŸÜŸÖÿß€å ÿπ€åÿ®‚Äå€åÿßÿ®€å - Kashif Mining Detector

## ŸÖÿ¥⁄©ŸÑÿßÿ™ ÿ±ÿß€åÿ¨ Ÿà ÿ±ÿßŸá‚Äåÿ≠ŸÑ‚ÄåŸáÿß:

### 1. ÿÆÿ∑ÿß€å "Port ${config.port} is already in use"
**ÿπŸÑÿ™**: ŸæŸàÿ±ÿ™ ${config.port} ÿ™Ÿàÿ≥ÿ∑ ÿ®ÿ±ŸÜÿßŸÖŸá ÿØ€å⁄Øÿ±€å ÿßÿ≥ÿ™ŸÅÿßÿØŸá ŸÖ€å‚Äåÿ¥ŸàÿØ
**ÿ±ÿßŸá‚Äåÿ≠ŸÑ**:
- ÿ®ÿ±ŸÜÿßŸÖŸá‚ÄåŸáÿß€å ÿØ€å⁄Øÿ± ÿ±ÿß ÿ®ÿ®ŸÜÿØ€åÿØ
- €åÿß ŸæŸàÿ±ÿ™ ÿ±ÿß ÿØÿ± \`app/config/app.json\` ÿ™ÿ∫€å€åÿ± ÿØŸá€åÿØ

### 2. ÿÆÿ∑ÿß€å "Node.js is not installed"
**ÿπŸÑÿ™**: Node.js ŸÜÿµÿ® ŸÜÿ¥ÿØŸá €åÿß ÿØÿ± PATH ŸÜ€åÿ≥ÿ™
**ÿ±ÿßŸá‚Äåÿ≠ŸÑ**:
- Node.js ÿ±ÿß ÿßÿ≤ https://nodejs.org/ ÿØÿßŸÜŸÑŸàÿØ ⁄©ŸÜ€åÿØ
- ŸÜÿµÿ® ⁄©ŸÜ€åÿØ Ÿà ÿ≥€åÿ≥ÿ™ŸÖ ÿ±ÿß ÿ±ÿßŸá‚ÄåÿßŸÜÿØÿßÿ≤€å ŸÖÿ¨ÿØÿØ ⁄©ŸÜ€åÿØ

### 3. ÿÆÿ∑ÿß€å "Database connection failed"
**ÿπŸÑÿ™**: ŸÖÿ¥⁄©ŸÑ ÿØÿ± ÿØÿ≥ÿ™ÿ±ÿ≥€å ÿ®Ÿá Ÿæÿß€å⁄ØÿßŸá ÿØÿßÿØŸá
**ÿ±ÿßŸá‚Äåÿ≠ŸÑ**:
- ŸÅÿß€åŸÑ \`ilam_mining.db\` ÿ±ÿß ÿ®ÿ±ÿ±ÿ≥€å ⁄©ŸÜ€åÿØ
- ÿØÿ≥ÿ™ÿ±ÿ≥€å‚ÄåŸáÿß€å ŸæŸàÿ¥Ÿá ÿ±ÿß ÿ®ÿ±ÿ±ÿ≥€å ⁄©ŸÜ€åÿØ

### 4. ÿÆÿ∑ÿß€å "Permission denied"
**ÿπŸÑÿ™**: ÿπÿØŸÖ ÿØÿ≥ÿ™ÿ±ÿ≥€å ⁄©ÿßŸÅ€å
**ÿ±ÿßŸá‚Äåÿ≠ŸÑ**:
- ÿ®ÿ±ŸÜÿßŸÖŸá ÿ±ÿß ÿ®ÿß ÿØÿ≥ÿ™ÿ±ÿ≥€å Administrator ÿßÿ¨ÿ±ÿß ⁄©ŸÜ€åÿØ
- ÿØÿ≥ÿ™ÿ±ÿ≥€å‚ÄåŸáÿß€å ŸæŸàÿ¥Ÿá ÿ±ÿß ÿ®ÿ±ÿ±ÿ≥€å ⁄©ŸÜ€åÿØ

### 5. ÿÆÿ∑ÿß€å "Module not found"
**ÿπŸÑÿ™**: ŸÅÿß€åŸÑ‚ÄåŸáÿß€å ÿ®ÿ±ŸÜÿßŸÖŸá ŸÜÿßŸÇÿµ ÿßÿ≥ÿ™
**ÿ±ÿßŸá‚Äåÿ≠ŸÑ**:
- ŸÅÿß€åŸÑ‚ÄåŸáÿß ÿ±ÿß ŸÖÿ¨ÿØÿØÿßŸã ÿØÿßŸÜŸÑŸàÿØ ⁄©ŸÜ€åÿØ
- ŸÖÿ∑ŸÖÿ¶ŸÜ ÿ¥Ÿà€åÿØ ⁄©Ÿá ÿ™ŸÖÿßŸÖ ŸÅÿß€åŸÑ‚ÄåŸáÿß ŸÖŸàÿ¨ŸàÿØ Ÿáÿ≥ÿ™ŸÜÿØ

### 6. ŸÖÿ¥⁄©ŸÑ ÿØÿ± ŸÜŸÖÿß€åÿ¥ ÿ≤ÿ®ÿßŸÜ ŸÅÿßÿ±ÿ≥€å
**ÿπŸÑÿ™**: ÿ™ŸÜÿ∏€åŸÖÿßÿ™ ÿ≤ÿ®ÿßŸÜ ÿ≥€åÿ≥ÿ™ŸÖ
**ÿ±ÿßŸá‚Äåÿ≠ŸÑ**:
- ŸÅŸàŸÜÿ™‚ÄåŸáÿß€å ŸÅÿßÿ±ÿ≥€å ÿ±ÿß ŸÜÿµÿ® ⁄©ŸÜ€åÿØ
- ÿ™ŸÜÿ∏€åŸÖÿßÿ™ ÿ≤ÿ®ÿßŸÜ ŸÖÿ±Ÿàÿ±⁄Øÿ± ÿ±ÿß ÿ®ÿ±ÿ±ÿ≥€å ⁄©ŸÜ€åÿØ

### 7. ŸÖÿ¥⁄©ŸÑ ÿØÿ± ÿπŸÖŸÑ⁄©ÿ±ÿØ ⁄©ŸÜÿØ
**ÿπŸÑÿ™**: ŸÖŸÜÿßÿ®ÿπ ÿ≥€åÿ≥ÿ™ŸÖ ŸÜÿß⁄©ÿßŸÅ€å
**ÿ±ÿßŸá‚Äåÿ≠ŸÑ**:
- RAM ÿ®€åÿ¥ÿ™ÿ±€å ÿßÿ∂ÿßŸÅŸá ⁄©ŸÜ€åÿØ
- ÿ®ÿ±ŸÜÿßŸÖŸá‚ÄåŸáÿß€å ÿØ€å⁄Øÿ± ÿ±ÿß ÿ®ÿ®ŸÜÿØ€åÿØ
- ÿ™ŸÜÿ∏€åŸÖÿßÿ™ ÿπŸÖŸÑ⁄©ÿ±ÿØ ÿ±ÿß ÿ®ÿ±ÿ±ÿ≥€å ⁄©ŸÜ€åÿØ

## ŸÑÿß⁄Ø‚ÄåŸáÿß:
ŸÅÿß€åŸÑ‚ÄåŸáÿß€å ŸÑÿß⁄Ø ÿØÿ± ŸæŸàÿ¥Ÿá \`app/logs\` ŸÇÿ±ÿßÿ± ÿØÿßÿ±ŸÜÿØ:
- \`app.log\`: ŸÑÿß⁄Ø‚ÄåŸáÿß€å ÿπŸÖŸàŸÖ€å
- \`error.log\`: ŸÑÿß⁄Ø‚ÄåŸáÿß€å ÿÆÿ∑ÿß

## ÿ™ŸÖÿßÿ≥ ÿ®ÿß Ÿæÿ¥ÿ™€åÿ®ÿßŸÜ€å:
ÿØÿ± ÿµŸàÿ±ÿ™ ÿ®ÿ±Ÿàÿ≤ ŸÖÿ¥⁄©ŸÑ:
1. ŸÅÿß€åŸÑ‚ÄåŸáÿß€å ŸÑÿß⁄Ø ÿ±ÿß ÿ®ÿ±ÿ±ÿ≥€å ⁄©ŸÜ€åÿØ
2. ÿ®ÿß ÿ™€åŸÖ Ÿæÿ¥ÿ™€åÿ®ÿßŸÜ€å ÿ™ŸÖÿßÿ≥ ÿ®⁄Ø€åÿ±€åÿØ
3. ÿßÿ∑ŸÑÿßÿπÿßÿ™ ÿ≥€åÿ≥ÿ™ŸÖ Ÿà ÿÆÿ∑ÿß ÿ±ÿß ÿßÿ±ÿ≥ÿßŸÑ ⁄©ŸÜ€åÿØ

---
ÿ®ÿ±ÿß€å ÿßÿ∑ŸÑÿßÿπÿßÿ™ ÿ®€åÿ¥ÿ™ÿ± ÿ®Ÿá ŸÅÿß€åŸÑ README.md ŸÖÿ±ÿßÿ¨ÿπŸá ⁄©ŸÜ€åÿØ.
`;

  fs.writeFileSync(path.join(standaloneDir, 'docs', 'TROUBLESHOOTING.md'), troubleshooting);
  
  // User manual
  const userManual = `# ÿ±ÿßŸáŸÜŸÖÿß€å ⁄©ÿßÿ±ÿ®ÿ± - Kashif Mining Detector

## ŸÅŸáÿ±ÿ≥ÿ™ ŸÖÿ∑ÿßŸÑÿ®:

### 1. ÿ¥ÿ±Ÿàÿπ ⁄©ÿßÿ±
- ŸÜÿµÿ® Ÿà ÿ±ÿßŸá‚ÄåÿßŸÜÿØÿßÿ≤€å
- Ÿàÿ±ŸàÿØ ÿ®Ÿá ÿ≥€åÿ≥ÿ™ŸÖ
- ÿ™ŸÜÿ∏€åŸÖÿßÿ™ ÿßŸàŸÑ€åŸá

### 2. ÿ±ÿßÿ®ÿ∑ ⁄©ÿßÿ±ÿ®ÿ±€å
- ÿØÿßÿ¥ÿ®Ÿàÿ±ÿØ ÿßÿµŸÑ€å
- ŸÖŸÜŸàŸáÿß Ÿà ŸÜŸàÿßÿ± ÿßÿ®ÿ≤ÿßÿ±
- ÿ™ŸÜÿ∏€åŸÖÿßÿ™ ŸÜŸÖÿß€åÿ¥

### 3. ÿßÿ≥⁄©ŸÜ Ÿà ÿ™ÿ¥ÿÆ€åÿµ
- ÿ¥ÿ±Ÿàÿπ ÿßÿ≥⁄©ŸÜ
- ÿ™ŸÜÿ∏€åŸÖÿßÿ™ ÿßÿ≥⁄©ŸÜ
- ŸÖÿ¥ÿßŸáÿØŸá ŸÜÿ™ÿß€åÿ¨

### 4. ŸÜŸÇÿ¥Ÿá Ÿà ŸÖŸàŸÇÿπ€åÿ™
- ŸÜŸÇÿ¥Ÿá ÿ™ÿπÿßŸÖŸÑ€å
- ŸÜŸÖÿß€åÿ¥ ŸÖŸàŸÇÿπ€åÿ™‚ÄåŸáÿß
- ŸÅ€åŸÑÿ™ÿ± ⁄©ÿ±ÿØŸÜ ŸÜÿ™ÿß€åÿ¨

### 5. ⁄Øÿ≤ÿßÿ±ÿ¥‚Äå⁄Ø€åÿ±€å
- ÿß€åÿ¨ÿßÿØ ⁄Øÿ≤ÿßÿ±ÿ¥
- ÿßŸÜŸàÿßÿπ ⁄Øÿ≤ÿßÿ±ÿ¥
- ÿµÿßÿØÿ± ⁄©ÿ±ÿØŸÜ ⁄Øÿ≤ÿßÿ±ÿ¥

### 6. Ÿáÿ¥ÿØÿßÿ±Ÿáÿß
- ÿ™ŸÜÿ∏€åŸÖ Ÿáÿ¥ÿØÿßÿ±Ÿáÿß
- ŸÖÿØ€åÿ±€åÿ™ Ÿáÿ¥ÿØÿßÿ±Ÿáÿß
- ÿßÿπŸÑÿßŸÜ‚ÄåŸáÿß

### 7. ŸÖÿØ€åÿ±€åÿ™ ⁄©ÿßÿ±ÿ®ÿ±ÿßŸÜ
- ÿß€åÿ¨ÿßÿØ ⁄©ÿßÿ±ÿ®ÿ±
- ÿ™ŸÜÿ∏€åŸÖ ÿØÿ≥ÿ™ÿ±ÿ≥€å‚ÄåŸáÿß
- ŸÖÿØ€åÿ±€åÿ™ ŸÜŸÇÿ¥‚ÄåŸáÿß

### 8. ÿ™ŸÜÿ∏€åŸÖÿßÿ™ Ÿæ€åÿ¥ÿ±ŸÅÿ™Ÿá
- ÿ™ŸÜÿ∏€åŸÖÿßÿ™ ÿ≥€åÿ≥ÿ™ŸÖ
- ÿ™ŸÜÿ∏€åŸÖÿßÿ™ ÿ¥ÿ®⁄©Ÿá
- ÿ™ŸÜÿ∏€åŸÖÿßÿ™ ÿßŸÖŸÜ€åÿ™€å

### 9. ŸÜ⁄ØŸáÿØÿßÿ±€å
- Ÿæÿ¥ÿ™€åÿ®ÿßŸÜ‚Äå⁄Ø€åÿ±€å
- ÿ®Ÿá‚Äåÿ±Ÿàÿ≤ÿ±ÿ≥ÿßŸÜ€å
- ÿπ€åÿ®‚Äå€åÿßÿ®€å

---
ÿß€åŸÜ ÿ±ÿßŸáŸÜŸÖÿß ÿØÿ± ÿ≠ÿßŸÑ ÿ™⁄©ŸÖ€åŸÑ ÿßÿ≥ÿ™.
`;

  fs.writeFileSync(path.join(standaloneDir, 'docs', 'USER_MANUAL.md'), userManual);
  
  console.log('‚úÖ Comprehensive documentation created');
}

// Main execution
async function main() {
  try {
    console.log('üöÄ Starting complete standalone solution creation...');
    console.log(`üìã Configuration:`);
    console.log(`  - App Name: ${config.appName}`);
    console.log(`  - Version: ${config.version}`);
    console.log(`  - Port: ${config.port}`);
    
    // Check if build exists
    if (!fs.existsSync('dist')) {
      console.log('üî® Building project first...');
      execSync('npm run build', { stdio: 'inherit' });
    }
    
    createCompleteStandalone();
    
    console.log('üéâ Complete standalone solution created successfully!');
    console.log('üìÅ Package location: kashif-standalone-complete/');
    console.log('üöÄ To run:');
    console.log('  Windows: Double-click start.bat');
    console.log('  Linux/Mac: ./start.sh');
    console.log('  PowerShell: .\\start.ps1');
    console.log('');
    console.log('üìö Documentation available in:');
    console.log('  - README.md (ÿ±ÿßŸáŸÜŸÖÿß€å ÿßÿµŸÑ€å)');
    console.log('  - docs/QUICK_START.md (ÿ¥ÿ±Ÿàÿπ ÿ≥ÿ±€åÿπ)');
    console.log('  - docs/TROUBLESHOOTING.md (ÿπ€åÿ®‚Äå€åÿßÿ®€å)');
    console.log('  - docs/USER_MANUAL.md (ÿ±ÿßŸáŸÜŸÖÿß€å ⁄©ÿßÿ±ÿ®ÿ±)');
    console.log('');
    console.log('üîß Tools available:');
    console.log('  - tools/check-system.* (ÿ®ÿ±ÿ±ÿ≥€å ÿ≥€åÿ≥ÿ™ŸÖ)');
    console.log('  - install.* (ŸÜÿµÿ® ⁄©ÿßŸÖŸÑ)');
    
  } catch (error) {
    console.error('‚ùå Failed to create complete standalone solution:', error);
    process.exit(1);
  }
}

// Run the main function
main(); 